# This is a reusable workflow used by master and release CI
on:
  workflow_call:
    inputs:
      tag:
        description: The tag to push
        required: true
        type: string
      is_latest:
        description: Update the latest tag with the new image
        required: false
        type: boolean
        default: false
      sign:
        description: Add signature with cosign
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  publish-docker:
    runs-on: ubuntu-latest

    permissions:
      attestations: write
      id-token: write
      contents: read

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Download x86_64 images tarballs
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: falco-images-x86_64
          path: /tmp/falco-images

      - name: Download aarch64 images tarballs
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: falco-images-aarch64
          path: /tmp/falco-images

      - name: Load all images
        run: |
          for img in /tmp/falco-images/falco-*.tar; do docker load --input $img; done

      - name: Setup Crane
        uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3
        with:
          version: v0.15.1

      # We're pushing the arch-specific manifests to GHCR so that we'll be able to easily create the index/multiarch later
      - name: Push arch-specific images to GHCR
        env:
          TAG: ${{ inputs.tag }}
        run: |
          docker push "ghcr.io/grafana/falco:aarch64-${TAG}"
          docker push "ghcr.io/grafana/falco:x86_64-${TAG}"
          docker push "ghcr.io/grafana/falco-driver-loader:aarch64-${TAG}"
          docker push "ghcr.io/grafana/falco-driver-loader:x86_64-${TAG}"

      - name: Create Falco manifest on GHCR
        uses: Noelware/docker-manifest-action@8e337e3cb9656abfcf20146b99706fd88716e942 # v0.4.0
        with:
          inputs: ghcr.io/grafana/falco:${{ inputs.tag }}
          images: ghcr.io/grafana/falco:aarch64-${{ inputs.tag }},ghcr.io/grafana/falco:x86_64-${{ inputs.tag }}
          push: true

      - name: Create falco-driver-loader manifest on GHCR
        uses: Noelware/docker-manifest-action@8e337e3cb9656abfcf20146b99706fd88716e942 # v0.4.0
        with:
          inputs: ghcr.io/grafana/falco-driver-loader:${{ inputs.tag }}
          images: ghcr.io/grafana/falco-driver-loader:aarch64-${{ inputs.tag }},docker.io/grafana/falco-driver-loader:x86_64-${{ inputs.tag }}
          push: true

      - name: Get Digests for images
        id: digests
        env:
          TAG: ${{ inputs.tag }}
        # We could probably use the docker-manifest-action output instead of recomputing those with crane
        run: |
          echo "falco=$(crane digest ghcr.io/grafana/falco:${TAG})" >> $GITHUB_OUTPUT
          echo "falco-driver-loader=$(crane digest ghcr.io/grafana/falco-driver-loader:${TAG})" >> $GITHUB_OUTPUT

      - name: Tag latest on GHCR
        if: inputs.is_latest
        env:
          TAG: ${{ inputs.tag }}
        run: |
          crane tag "ghcr.io/grafana/falco:${TAG}" latest
          crane tag "ghcr.io/grafana/falco-driver-loader:${TAG}" latest

      - uses: actions/attest-build-provenance@173725a1209d09b31f9d30a3890cf2757ebbff0d # v1.1.2
        with:
          subject-name: ghcr.io/grafana/falco
          subject-digest: ${{ steps.digests.outputs.falco }}
          push-to-registry: true

      - uses: actions/attest-build-provenance@173725a1209d09b31f9d30a3890cf2757ebbff0d # v1.1.2
        with:
          subject-name: ghcr.io/grafana/falco-driver-loader
          subject-digest: ${{ steps.digests.outputs.falco-driver-loader }}
          push-to-registry: true
